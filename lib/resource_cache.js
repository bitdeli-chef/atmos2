// Generated by CoffeeScript 1.3.3
(function() {
  var ResourceCache;

  ResourceCache = (function() {

    function ResourceCache() {}

    ResourceCache.prototype.store_objects = function(path, objects) {
      /* Stores resulting objects in cache.
      
      **Arguments:**
      
      - `path` Path object that will be used to identify a request.
      E.g.: `{method: 'get', path: '/users/list'}`
      - `objects` Resulting objects formatted as array of objects.
      E.g.: `[{name: 'foo', age: 20}, {name: 'bar', age: 21}]`
      Objects should also contain value for the `id` field.
      */

      var object, object_keys, request_key;
      object_keys = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          object = objects[_i];
          _results.push(this._store_object(object));
        }
        return _results;
      }).call(this);
      request_key = this._request_key(path);
      return this._local_write(request_key, object_keys);
    };

    ResourceCache.prototype.update_object = function(object) {
      return this._store_object(object);
    };

    ResourceCache.prototype._store_object = function(object) {
      var key;
      key = object.id || this._object_checksum(object);
      key = "a.cache.object." + key;
      this._local_write(key, object);
      return key;
    };

    ResourceCache.prototype.collect_objects = function(path) {
      /* Returns objects at some path. Should've the cache been not used before
      `null` will be returned instead.
      */

      var object_keys, objects, request_key;
      request_key = this._request_key(path);
      object_keys = this._local_read(request_key);
      objects = this._objects_for_keys(object_keys);
      return objects;
    };

    ResourceCache.prototype._objects_for_keys = function(keys) {
      var key, _i, _len, _results;
      if (!keys) {
        return null;
      }
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _results.push(this._local_read(key));
      }
      return _results;
    };

    ResourceCache.prototype._request_key = function(path) {
      var key;
      key = this._object_checksum(path);
      return "a.cache.request." + key;
    };

    ResourceCache.prototype._object_checksum = function(object) {
      var acc, i, text, _i, _ref;
      text = JSON.stringify(object);
      acc = 1;
      for (i = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        acc *= text[i].charCodeAt(0);
      }
      return acc % 1000000000;
    };

    ResourceCache.prototype._local_write = function(key, object) {
      return localStorage[key] = JSON.stringify(object);
    };

    ResourceCache.prototype._local_read = function(key) {
      var data;
      data = localStorage[key];
      if (data) {
        return JSON.parse(data);
      } else {
        return null;
      }
    };

    return ResourceCache;

  })();

  module.exports = ResourceCache;

}).call(this);
