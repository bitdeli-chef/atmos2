// Generated by CoffeeScript 1.3.3
(function() {
  var Atmos, MessageClient, ResourceClient, SocketIO, Spine,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Spine = require('spine');

  SocketIO = require('./vendor/socket.io');

  window.SocketIO = SocketIO;

  MessageClient = require('./message_client');

  ResourceClient = require('./resource_client');

  Atmos = (function(_super) {

    __extends(Atmos, _super);

    Atmos.include(Spine.Events);

    function Atmos(options) {
      /* Creates an instance of Atmos.
      */
      options.atmos = this;
      this.messages = new MessageClient(options);
      this.resources = new ResourceClient(options);
      Atmos.instance = this;
    }

    Atmos.prototype.fetch = function() {
      var params, _ref;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.resources).fetch.apply(_ref, params);
    };

    Atmos.prototype.create = function() {
      var params, _ref;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.resources).create.apply(_ref, params);
    };

    Atmos.prototype.update = function() {
      var params, _ref;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.resources).update.apply(_ref, params);
    };

    Atmos.prototype.request = function() {
      var params, _ref;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.resources).request.apply(_ref, params);
    };

    Atmos.prototype.get = function() {
      var params, _ref;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.resources).get.apply(_ref, params);
    };

    Atmos.prototype.post = function() {
      var params, _ref;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.resources).post.apply(_ref, params);
    };

    Atmos.prototype.did_auth = function(content) {
      return this.trigger("auth_success");
    };

    Atmos.prototype.did_fail_auth = function(content) {
      return this.trigger("auth_fail");
    };

    return Atmos;

  })(Spine.Module);

  module.exports = Atmos;

}).call(this);
