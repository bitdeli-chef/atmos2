// Generated by CoffeeScript 1.3.1
(function() {
  var ResourceClient, Spine, assert, pluralize, _ref;

  Spine = require('spine');

  _ref = require('./util'), assert = _ref.assert, pluralize = _ref.pluralize;

  ResourceClient = (function() {

    ResourceClient.name = 'ResourceClient';

    function ResourceClient(options) {
      this.atmos = options.atmos;
      this.app_context = options.app_context;
      this.base = null;
      this.routes = {};
      this._headers = {};
      this._id_field = '_id';
    }

    ResourceClient.prototype.fetch = function(collection, options, callback) {
      var path,
        _this = this;
      if (options == null) {
        options = {};
      }
      path = this._path(collection, "index", options);
      return this.request(path, {}, function(items) {
        var item, _i, _len;
        if (items == null) {
          console.log("[ResourceClient] Items not found in response", result);
          return;
        }
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          item.id = item[_this._id_field];
          assert(item.id, "[ResourceClient] There's no field '" + _this._id_field + "' that is configured as _id_field in incoming object");
        }
        return callback(items);
      });
    };

    ResourceClient.prototype.save = function(object, options) {
      var data, path, uri,
        _this = this;
      if (options == null) {
        options = {};
      }
      uri = this.app_context.objectURI(object);
      path = this._pathForURI(uri, options.action, options);
      data = options.data || this.app_context.dataForObject(object);
      if (data[this._id_field] == null) {
        data[this._id_field] = object.id;
      }
      if (options.prepareData != null) {
        data = options.prepareData(data, options);
      }
      return this.request(path, data, function(result) {
        if (options.sync) {
          object.save();
          uri = _this.app_context.objectURI(object);
        }
        return _this.update_from_item(uri, result, options);
      });
    };

    ResourceClient.prototype.execute = function(options, callback) {
      var path;
      if (typeof options === 'string') {
        path = {
          method: 'get',
          path: options
        };
      } else if (options.collection) {
        path = this._path(options.collection, options.action, options);
      } else if (options.object) {
        path = this._path_for_object(options.object, options.action, options);
      } else {
        path = options;
      }
      return this.request(path, options.data, callback);
    };

    ResourceClient.prototype._path = function(collection, action, options) {
      var method, param, path, route, route_path, value, _ref1, _ref2;
      if (options == null) {
        options = {};
      }
      /* Creates path for collection/action pair.
      
      **Options**
      
        - `path_params` if path contains additional params, e.g. `/foo/:bar_id`,
        you can specify their values as object, e.g. `{bar_id: 5}`
        - `params` params that will be used as query string, e.g. specify
        `{bar: 5}` to get url `/foo?bar=5`
      
      **Return value**
      
      A route object, e.g. `{method: 'get', path: '/foo', query: 'bar=5'}`
      */

      route_path = this.routes[collection] ? this.routes[collection][action] : null;
      if (route_path) {
        _ref1 = route_path.split(" "), method = _ref1[0], path = _ref1[1];
      } else {
        method = this._method_for_action(action);
        path = '/' + pluralize(collection.toLowerCase());
      }
      if (options.path_params != null) {
        _ref2 = options.path_params;
        for (param in _ref2) {
          value = _ref2[param];
          path = path.replace(":" + param, value);
        }
      }
      route = {
        method: method,
        path: path
      };
      if (options.params != null) {
        route.query = $.param(options.params);
      }
      return route;
    };

    ResourceClient.prototype._method_for_action = function(action) {
      /* Returns default method for action passed.
      */

      var methods;
      methods = {
        'index': 'get',
        'create': 'post',
        'update': 'put',
        'delete': 'delete'
      };
      return methods[action];
    };

    ResourceClient.prototype.request = function(route, data, callback) {
      /* Makes an AJAX request specified by the `route` param.
      */

      var content_type, error, options, url,
        _this = this;
      content_type = "application/x-www-form-urlencoded";
      error = function(res, err) {
        if (res.status === 401) {
          console.log("failed with error 401 " + err);
          return _this.atmos.didFailAuth();
        }
        return console.log("Request failed " + res + " " + err, res, err);
      };
      options = {
        type: route.method,
        dataType: "json",
        success: callback,
        error: error,
        _headers: this._headers,
        content_type: content_type,
        data: data
      };
      url = this.base + route.path;
      return $.ajax(url, options);
    };

    ResourceClient.prototype.add_header = function(header, value) {
      return this._headers[header] = value;
    };

    return ResourceClient;

  })();

  module.exports = ResourceClient;

}).call(this);
