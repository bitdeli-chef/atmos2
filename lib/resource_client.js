// Generated by CoffeeScript 1.3.3
(function() {
  var ResourceCache, ResourceClient, assert, pluralize, _ref;

  _ref = require('./util'), assert = _ref.assert, pluralize = _ref.pluralize;

  ResourceCache = require('./resource_cache');

  ResourceClient = (function() {

    function ResourceClient(options) {
      this.atmos = options.atmos;
      this.cache = new ResourceCache;
      this.cache_enabled = true;
      this.base = options.base;
      this.routes = options.routes || {};
      this.headers = options.headers || {};
      this.id_field = options.id_field || '_id';
    }

    ResourceClient.prototype.fetch = function(collection, options, callback) {
      var cached_items, path,
        _this = this;
      if (options == null) {
        options = {};
      }
      path = this._path(collection, "index", options);
      if (this.cache_enabled) {
        cached_items = this.cache.collect_objects(path);
        if (cached_items) {
          callback(cached_items);
        }
      }
      return this.request(path, {}, function(items, res) {
        var item, _i, _len;
        if (items == null) {
          console.log("[ResourceClient] Items not found in response", res);
          return;
        }
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          item.id = item[_this.id_field];
          assert(item.id, "[ResourceClient] There's no field '" + _this.id_field + "' that is configured as id_field in incoming object");
        }
        if (_this.cache_enabled) {
          _this.cache.store_objects(path, items);
        }
        return callback(items);
      });
    };

    ResourceClient.prototype.create = function(collection, object, options, callback) {
      if (options == null) {
        options = {};
      }
      options.action || (options.action = 'create');
      return this._save(collection, object, options, callback);
    };

    ResourceClient.prototype.update = function(collection, object, options, callback) {
      if (options == null) {
        options = {};
      }
      options.action || (options.action = 'update');
      return this._save(collection, object, options, callback);
    };

    ResourceClient.prototype._save = function(collection, object, options, callback) {
      var data, path,
        _this = this;
      if (options == null) {
        options = {};
      }
      data = object;
      data[this.id_field] = object.id;
      options.path_params || (options.path_params = {});
      options.path_params.id = data.id;
      path = this._path(collection, options.action, options);
      return this.request(path, data, function(object, res) {
        if (_this.cache_enabled) {
          _this.cache.update_object(object);
        }
        return callback(object);
      });
    };

    ResourceClient.prototype._path = function(collection, action, options) {
      var method, param, path, route, value, _ref1, _ref2;
      if (options == null) {
        options = {};
      }
      /* Creates path for collection/action pair.
      
      **Options**
      
        - `path_params` if path contains additional params, e.g. `/foo/:bar_id`,
        you can specify their values as object, e.g. `{bar_id: 5}`
        - `params` params that will be used as query string, e.g. specify
        `{bar: 5}` to get url `/foo?bar=5`
      
      **Return value**
      
      A route object, e.g. `{method: 'get', path: '/foo', query: 'bar=5'}`
      */

      path = this.routes[collection] ? this.routes[collection][action] : null;
      if (!path) {
        path = this._default_path(collection, action);
      }
      _ref1 = path.split(" "), method = _ref1[0], path = _ref1[1];
      if (options.path_params != null) {
        _ref2 = options.path_params;
        for (param in _ref2) {
          value = _ref2[param];
          path = path.replace(":" + param, value);
        }
      }
      route = {
        method: method,
        path: path
      };
      if (options.params != null) {
        route.query = options.params;
      }
      return route;
    };

    ResourceClient.prototype._default_path = function(collection, action) {
      /* Returns default route path for action passed.
      */

      var methods;
      methods = {
        'index': "get /" + collection,
        'create': "post /" + collection,
        'update': "put /" + collection + "/:id",
        'delete': "delete /" + collection + "/:id"
      };
      return methods[action];
    };

    ResourceClient.prototype.request = function(route, data, callback) {
      /* Makes an AJAX request.
      
      **Arguments**:
      
      - `route` Atmos route object, see `_path`
      - `data` Data payload for POST requests. To specify URL parameters
      in GET requests, use `query` key of route.
      - `callback(object, response)` Function to be called upon finishing
      request. If the response was valid JSON, `object` is parsed JSON.
      */

      var complete, content_type, options, url,
        _this = this;
      content_type = "application/x-www-form-urlencoded";
      complete = function(res) {
        var object;
        try {
          object = JSON.parse(res.responseText);
        } catch (error) {
          console.log('unable to parse json', res.responseText, error);
        }
        if (res.status === 401) {
          _this.atmos.did_fail_auth();
        }
        return callback(object, res);
      };
      options = {
        type: route.method,
        complete: complete,
        headers: this.headers,
        content_type: content_type,
        data: data
      };
      url = this.base + route.path;
      if (route.query) {
        url += '?' + $.param(route.query);
      }
      return $.ajax(url, options);
    };

    ResourceClient.prototype.get = function(path, callback) {
      /* Shortcut method for making quick `get` request **without
      query params.** If you want to add query params, use `request`
      and pass a route object.
      */
      return this.request({
        method: 'get',
        path: path
      }, {}, callback);
    };

    ResourceClient.prototype.post = function(path, data, callback) {
      /* Shortcut for making quick `post` request. See `get`.
      */
      return this.request({
        method: 'post',
        path: path
      }, data, callback);
    };

    ResourceClient.prototype.add_header = function(header, value) {
      return this.headers[header] = value;
    };

    return ResourceClient;

  })();

  module.exports = ResourceClient;

}).call(this);
