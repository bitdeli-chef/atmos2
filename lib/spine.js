// Generated by CoffeeScript 1.3.3
(function() {
  var Atmos, Spine, atmos_save, pluralize, pushed_models, setup_model_for_push,
    __slice = [].slice;

  Spine = require('spine');

  Atmos = require('./atmos');

  pushed_models = {};

  setup_model_for_push = function(model) {
    var collection;
    collection = pluralize(model.className);
    return pushed_models[collection] = model;
  };

  Spine.Model.Atmos = {
    extended: function() {
      var spine_save;
      spine_save = this.prototype["save"];
      return this.prototype["save"] = function() {
        var args, atmos, options;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        atmos = Atmos.instance;
        options = args[0];
        if ((options != null) && options.remote === true) {
          return atmos_save(this, options);
        } else {
          return spine_save.call.apply(spine_save, [this].concat(__slice.call(args)));
        }
      };
    },
    sync: function(params) {
      var atmos, collection,
        _this = this;
      if (params == null) {
        params = {};
      }
      this.fetch();
      atmos = Atmos.instance;
      collection = pluralize(this.className);
      setup_model_for_push(this);
      return atmos.fetch(collection, params, function(objects) {
        console.log('loading objects to class', objects, _this);
        return _this.refresh(objects);
      });
    }
  };

  atmos_save = function(object, options) {
    var atmos, class_name, collection, data;
    atmos = Atmos.instance;
    class_name = object.constructor.className;
    collection = pluralize(class_name.toLowerCase());
    data = object.attributes();
    if (object.isNew()) {
      return atmos.create(collection, data, options, function(object) {
        return console.log('create finished', object);
      });
    } else {
      return atmos.update(collection, data, options, function(object) {
        return console.log('create finished', object);
      });
    }
  };

  pluralize = function(word) {
    word = word.toLowerCase();
    if (word.match(/y$/)) {
      return word.replace(/y$/, 'ies');
    } else {
      return word + 's';
    }
  };

  Atmos.ready = function() {
    return Atmos.bind('update_object', function(_arg) {
      var collection, id, model, object, record;
      collection = _arg.collection, id = _arg.id, object = _arg.object;
      model = pushed_models[collection];
      if (!model) {
        return console.log("collection " + collection + " wasn't synced yet");
      }
      console.log('updating', collection, id, object);
      record = model.exists(id) || new model;
      record.load(object);
      record.id = id;
      return record.save();
    });
  };

}).call(this);
